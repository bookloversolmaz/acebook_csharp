using NUnit.Framework;
using FluentAssertions;
using System.Net.Http.Json;
using System.Net;
using System.Text.Json;
using System.Net.Http.Headers;
using System;
using Microsoft.Extensions.Logging; // For ILogger&lt;&gt;
using NSubstitute;

namespace Acebook.Tests
{
[TestFixture]
    public class ProfilePage
    {
    private HttpClient _client;

    [SetUp]
    // Create new user, sign in as user and then use that for the tests
    public async Task Setup()
    {
        _client = new HttpClient();
        _client.BaseAddress = new Uri("http://localhost:5287");
        // Arrange
        var userData = new
        {
            username = "Lina",
            email = "lina@email.com",
            password = "Secret123!"
        };

      // Act
        await _client.PostAsJsonAsync("/api/users", userData); // Created new user
        var response = await _client.PostAsJsonAsync("/api/tokens", userData); // Signed in new user
        var Json = await response.Content.ReadFromJsonAsync<JsonElement>(); // Extracted the json data only from the response
        var token = Json.GetProperty("token").GetString(); // Extracted the token as a string from the Json
        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token); // Whenever _client sends something, it has the authorisation containing the token, which is a JWT token (bearer) and here is the token
    } 

    // TODO: clear out database?
    [TearDown]
    public void TearDown()
    {
        _client.Dispose();
    }

    [Test]
    // TODO: use client to send request, pass in message and user id. Check create post and sign user in OR use token
    public async Task UserDtoReturnedFromDbSelectRequest()
    {
      // Arrange
        var UserData = new
        {
            // Only send message as user id and user are generated by the database. CreatedAt also created by Postscontroller
            id = "123"
        };

      // Act
        var response = await _client.PostAsJsonAsync("/api/users/getuserbyid", UserData);
        // Assert
        response.Should().BeSuccessful();
    }
}
}