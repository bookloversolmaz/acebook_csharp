using NUnit.Framework;
using FluentAssertions;
using System.Net.Http.Json;
using System.Net;
using System.Text.Json;
using System.Net.Http.Headers;
using System;
using Microsoft.Extensions.Logging; // For ILogger&lt;&gt;
using NSubstitute;

namespace Acebook.Tests
{
[TestFixture]
    public class CommentsControllerTest
    {
    private HttpClient _client;
        private string _token = string.Empty;
        private int _postId;

        [SetUp]
        // Create new user, sign in as user and then use that for the tests
        public async Task Setup()
        {
            _client = new HttpClient();
            _client.BaseAddress = new Uri("http://localhost:5287");
            // Arrange
            var userData = new
            {
                username = "Lina",
                email = "lina@email.com",
                password = "Secret123!"
            };



            // Act
            await _client.PostAsJsonAsync("/api/users", userData); // Created new user
            var loginResponse = await _client.PostAsJsonAsync("/api/tokens", userData); // Signed in new user
            var json = await loginResponse.Content.ReadFromJsonAsync<JsonElement>(); // Extracted the json data only from the response
            _token = json.GetProperty("token").GetString(); // Extracted the token as a string from the Json
            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", _token); // Whenever _client sends something, it has the authorisation containing the token, which is a JWT token (bearer) and here is the token

            // Create a post
            var postData = new { Message = "hello world" };
            var postResponse = await _client.PostAsJsonAsync("api/posts", postData);

            postResponse.EnsureSuccessStatusCode();

            var postJson = await postResponse.Content.ReadFromJsonAsync<JsonElement>();
            _postId = postJson.GetProperty("_Id").GetInt32();

            
    } 

    // CLEARS OUT THE DB
    [TearDown]
    public void TearDown()
    {
        _client.Dispose();
    }

        [Test]
        public async Task CheckThatCommentIsCreatedAndReturned()
        {
            // Arrange
            var CommentData = new
            {
                // Only send message as user id and user are generated by the database. CreatedAt also created by Postscontroller
                Message = "TestComment1",
                PostId = _postId
            };

            // Act: Create a comment

            var createResponse = await _client.PostAsJsonAsync($"/api/comments", CommentData);
            createResponse.StatusCode.Should().Be(HttpStatusCode.Created);

            var json = await createResponse.Content.ReadFromJsonAsync<JsonElement>();

            var commentJson = json.GetProperty("comment");
            var message = commentJson.GetProperty("message").GetString();
            var postId = commentJson.GetProperty("postId").GetInt32();
            var commentId = json.GetProperty("_Id").GetInt32();
            var token = json.GetProperty("token").GetString();

            // Act: Get Comments for that post
            var getResponse = await _client.GetAsync($"/api/comments/getcommentsbypostid?id={_postId}");
            getResponse.StatusCode.Should().Be(HttpStatusCode.OK);

            var responseJson = await getResponse.Content.ReadFromJsonAsync<JsonElement>();
            var comments = responseJson.GetProperty("comments");
            comments.GetArrayLength().Should().BeGreaterThan(0);

            var firstComment = comments[0];
            firstComment.GetProperty("message").GetString().Should().Be("TestComment1");
            firstComment.GetProperty("postId").GetInt32().Should().Be(_postId);
    }
}
}